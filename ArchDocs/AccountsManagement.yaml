swagger: '2.0'
info:
  title: Swarmer API
  description: Internal Swarmer API
  version: "1.0.0-SNAPSHOT"
# the domain of the service
host: internal-api.swarmer.ru
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1.0.0-snapshot/accounts
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    get:
      operationId: 'ListUsers'
      summary: Get registered in system users
      description: |
        Get registered users by filter
      parameters:
        - name: filter
          in: query
          description: Json representation of query
          required: false
          type: string
        - name: page
          in: query
          type: integer
          description: Number of page in pagination
          required: false
          default: 0
          minimum: 0
        - name: pageSize
          in: query
          description: Size of single page
          required: false
          type: integer
          default: 10
          minimum: 10
          maximum: 100
      tags:
        - Users
      responses:
        200:
          description: An array of users
          schema:
            title: Users
            type: array
            items:
              $ref: '#/definitions/UserInfo'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: 'CreateUser'
      summary: Create user
      description: |
        Create new user. Id will be generated by service.
      parameters:
        - name: creatingUser
          in: body
          description: User that will be created
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User was created
          schema:
            $ref: '#/definitions/UserInfo'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users/{userId}:
    get:
      operationId: 'GetUserById'
      summary: Get registered user by id
      description: |
        This method returns user, that already should be registered.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: Id of user
          type: integer
          required: true
      responses:
        200:
          description: Full info about user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: 'UpdateOrCreateUserData'
      summary: Update user data or create user with given id.
      description: |
        Update user by given id
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: Id of user
          type: integer
          required: true
        - name: updatingUser
          in: body
          required: true
          description: User data
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User data was successfully update.
          schema:
            $ref: '#/definitions/UserInfo'
        201:
          description: User was created
          schema:
            $ref: '#/definitions/UserInfo'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users/{userId}/teams:
    get:
      operationId: 'GetUserTeamsMembership'
      summary: Get user teams
      tags:
        - Users
        - Teams
      parameters:
        - name: userId
          in: path
          description: Id of user
          type: integer
          required: true
      responses:
        200:
          description: Teams in which user has parts
          schema:
            title: UserTeams
            type: array
            items:
              $ref: '#/definitions/TeamMembership'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users/{userId}/teams/{teamId}:
    post:
      operationId: 'GiveUserTeamMembershup'
      summary: Add user participation in team
      tags:
        - Users
        - Teams
      parameters:
        - name: userId
          in: path
          description: Id of user
          type: integer
          required: true
        - name: teamId
          in: path
          description: Id of team
          type: integer
          required: true
      responses:
        201:
          description: User participation in team created
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: 'RemoveUserTeamMembership'
      summary: Remove user participation in team
      tags:
        - Users
        - Teams
      parameters:
        - name: userId
          in: path
          description: Id of user
          type: integer
          required: true
        - name: teamId
          in: path
          description: Id of team
          type: integer
          required: true
      responses:
        200:
          description: User participation in team removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /teams:
    get:
      operationId: 'List teams'
      summary: Get all available teams
      tags:
        - Teams
      parameters:
        - name: filter
          in: query
          description: Json representation of query
          required: false
          type: string
        - name: page
          in: query
          type: integer
          description: Number of page in pagination
          required: false
          default: 0
          minimum: 0
        - name: pageSize
          in: query
          description: Size of single page
          required: false
          type: integer
          default: 10
          minimum: 10
          maximum: 100
      responses:
        200:
          description: An array of users
          schema:
            title: Users
            type: array
            items:
              $ref: '#/definitions/TeamInfo'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /teams/{teamId}:
    get:
      operationId: 'GetTeamById'
      summary: Get team by id.
      tags:
        - Teams
      parameters:
        - name: teamId
          in: path
          description: Id of team.
          required: true
          type: integer
      responses:
        200:
          description: An array of users
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /teams/{teamId}/user/{userId}:
    put:
      operationId: 'UpdateOrGiveTeamMembership'
      summary: Update or give user participation in team
      tags:
        - Users
        - Teams
      parameters:
        - name: teamId
          in: path
          description: Id of team.
          required: true
          type: integer
        - name: userId
          in: path
          description: Id of user.
          required: true
          type: integer
        - name: updatedInfo
          in: body
          description: Updated team membership info.
          required: true
          schema:
            $ref: '#/definitions/TeamMembershipData'
      responses:
        200:
          description: Emtpy if data successfully updated.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  SysObject:
    type: object
    description: 'System information about object'
    properties:
      id:
        type: integer
        description: Id of object.
      created:
        type: string
        format: date-time
        description: Creationg date time
      updated:
        type: string
        format: date-time
        description: Updating date time.

  TeamMembership:
    description: 'User team membership'
    allOf:
      - $ref: '#/definitions/SysObject'
      - type: object
        properties:
          userId:
            type: integer
            description: Id of user that participate in team
          teamId:
            type: integer
            description: Id of team in which user participate
          data:
            $ref: '#/definitions/TeamMembershipData'

  TeamMembershipData:
    description: Info about user team perticipation.
    type: object
    properties:
      approuved:
        type: boolean
        description: Is user participation approuved by owner
      isActive:
        type: boolean
        description: Is user participation in team is active
      startDate:
        type: string
        format: date-time
        description: When user membership started.

  UserInfo:
    description: Shotened user data.
    allOf:
      - $ref: '#/definitions/SysObject'
      - type: object
        properties:
          firstName:
            type: string
            description: First name of user.
          secondName:
            type: string
            description: Second name of user.
          login:
            type: string
            description: Login and nickname of user.

  User:
    type: object
    description: Full user model.
    allOf:
      - $ref: '#/definitions/UserInfo'
      - type: object
        properties:
          gender:
            type: string
            description: User's gender.
          role:
            type: string
            description: Role of user.
          availableEntries:
            type: array
            items:
              type: string
            description: Available entry ways.
          steamId:
            type: integer
            description: Id of user in Steam.
          birthDate:
            type: string
            format: date
            description: User birth date.
          phoneNumber:
            type: string
            description: User's phone number.
          address:
            type: string
            description: User's main address.
          timeZone:
            type: string
            description: User's time zone for time correction.
          country:
            type: string
            description: User's living country.
          created:
            type: string
            format: date-time
            description: User creation time.
          updated:
            type: string
            format: date-time
            description: User info last modification time.
          profile:
            $ref: '#/definitions/UserProfile'

  TeamInfo:
    description: Shortened info about team.
    allOf:
      - $ref: '#/definitions/SysObject'
      - type: object
        properties:
          name:
            type: string
            description: Name of team.

  Team:
    type: object
    description: Full model of team.
    allOf:
      - $ref: "#/definitions/TeamInfo"
      - type: object
        properties:
          owner:
            type: integer
            description: Id of owning user.
          fullName:
            type: string
            description: Full name of team.
          profile:
            $ref: "#/definitions/TeamProfile"
          members:
            type: array
            items:
              $ref: '#/definitions/TeamMembership'

  TeamProfile:
    type: object
    description: Profile of team.
    properties:
      icon:
        type: string
        description: Link to icon of team.
      image:
        type: string
        description: Link to image of team.
      numberOfWins:
        type: integer
        description: Number of team wins.
      totalGames:
        type: integer
        description: Total number of games.

  UserProfile:
    type: object
    properties:
      image:
        type: string
        description: Link on user image.
      last_name:
        type: string
        description: Last name of the Uber user.

#  FilterElement:
#    type: object
#    description: Element of filter
#    properties:
#      op:
#        type: string
#        description: |
#          Operation with which filter element included.
#      fld:
#        type: string
#        description: Name of field.
#      flo:
#        type: string
#        description: Filtering operation.
#      val:
#        type: string
#        description: Value of filtering operation.
#
#  Filter:
#    type: object
#    description: Filter for collections.
#    properties:
#      els:
#        type: array
#        items:
#          $ref: '#/definitions/FilterElement'

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
