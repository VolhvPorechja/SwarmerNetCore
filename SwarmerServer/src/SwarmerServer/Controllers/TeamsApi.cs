/*
 * Swarmer API
 *
 * Internal Swarmer API
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swarmer.AM.Contracts.Domain;
using Swashbuckle.SwaggerGen.Annotations;

namespace SwarmerServer.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TeamsApiController : Controller
    { 

        /// <summary>
        /// Get team by id.
        /// </summary>
        
        /// <param name="teamId">Id of team.</param>
        /// <response code="200">An array of users</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/teams/{teamId}")]
        [SwaggerOperation("GetTeamById")]
        [SwaggerResponse(200, type: typeof(Team))]
        public virtual IActionResult GetTeamById([FromRoute]int? teamId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Team>(exampleJson)
            : default(Team);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get all available teams
        /// </summary>
        
        /// <param name="filter">Json representation of query</param>
        /// <param name="page">Number of page in pagination</param>
        /// <param name="pageSize">Size of single page</param>
        /// <response code="200">An array of users</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/teams")]
        [SwaggerOperation("ListTeams")]
        [SwaggerResponse(200, type: typeof(List<TeamInfo>))]
        public virtual IActionResult ListTeams([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TeamInfo>>(exampleJson)
            : default(List<TeamInfo>);
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update or give user participation in team
        /// </summary>
        
        /// <param name="teamId">Id of team.</param>
        /// <param name="userId">Id of user.</param>
        /// <response code="200">Emtpy if data successfully updated.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/teams/{teamId}/user/{userId}")]
        [SwaggerOperation("UpdateOrGiveTeamMembership")]
        public virtual void UpdateOrGiveTeamMembership([FromRoute]int? teamId, [FromRoute]int? userId)
        { 
            throw new NotImplementedException();
        }
    }
}