/*
 * Swarmer API
 *
 * Internal Swarmer API
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using NLog;
using Swarmer.AM.Contracts.Domain;
using Swarmer.AM.Core;
using Swarmer.Common.Assetions;
using Swarmer.Common.Logging;
using Swashbuckle.SwaggerGen.Annotations;

namespace SwarmerServer.Controllers
{
	/// <summary>
	/// 
	/// </summary>
	public class UsersApiController : Controller
	{
		/// <summary>
		/// Static class that contains events types codes.
		/// </summary>
		public static class Codes
		{
			public static string UserCreation { get; } = "U001";
			public static string UserDataUpdate { get; } = "U002";
			public static string MembershipRequest { get; } = "U003";
			public static string MembershipRemove { get; } = "U004";

		}

		private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

		private readonly AccountsManagementCore mCore;
		private readonly LogMessagesManager mLogMessManager;
		private readonly string mReferenceId;

		/// <summary>
		/// CTOR
		/// </summary>
		/// <param name="core">Initialized service core.</param>
		/// <param name="logMessManager">Log messages manager.</param>
		public UsersApiController(AccountsManagementCore core, LogMessagesManager logMessManager)
		{
			mLogMessManager = logMessManager;
			mCore = core;
			mReferenceId = Guid.NewGuid().ToString();
		}

		/// <summary>
		/// Get registered user by id
		/// </summary>
		/// <remarks>This method returns user, that already should be registered. </remarks>
		/// <param name="userId">Id of user</param>
		/// <response code="200">Full info about user</response>
		/// <response code="0">Unexpected error</response>
		[HttpGet]
		[Route("/users/{userId}")]
		[SwaggerOperation("GetUserById")]
		[SwaggerResponse(200, type: typeof(User))]
		public virtual IActionResult GetUserById([FromRoute] Guid? userId)
		{
			if (userId == null)
				return BadRequest("userId can't be empty");

			var result = mCore.UsersApi.GetUser(userId.Value);

			return new ObjectResult(result);
		}

		/// <summary>
		/// Create user
		/// </summary>
		/// <remarks>Create new user. Id will be generated by service. </remarks>
		/// <param name="creatingUser">User that will be created</param>
		/// <response code="201">User was created</response>
		/// <response code="0">Unexpected error</response>
		[HttpPost]
		[Route("/users")]
		[SwaggerOperation("CreateUser")]
		[SwaggerResponse(200, type: typeof(UserInfo))]
		public virtual IActionResult CreateUser([FromBody] User creatingUser)
		{
			Logger.Info(mLogMessManager.Log("SomeUser", Codes.UserCreation, "User creation started.", mReferenceId,
				new {creatingUser}));

			try
			{
				var result = mCore.UsersApi.CreateUser(creatingUser);

				Logger.Info(mLogMessManager.Log("SomeUser", Codes.UserCreation, "User created.", mReferenceId));

				return new ObjectResult(result);
			}
			catch (NotValidRequestException exception)
			{
				Logger.Error(mLogMessManager.Log("SomeUser", Codes.UserCreation, $"User creation error: {exception.Message}.",
					mReferenceId));
				return BadRequest(exception.Message);
			}
		}


		/// <summary>
		/// Get user teams
		/// </summary>
		/// <param name="userId">Id of user</param>
		/// <response code="200">Teams in which user has parts</response>
		/// <response code="0">Unexpected error</response>
		[HttpGet]
		[Route("/users/{userId}/teams")]
		[SwaggerOperation("GetUserTeamsMembership")]
		[SwaggerResponse(200, type: typeof(List<TeamMembership>))]
		public virtual IActionResult GetUserTeamsMembership([FromRoute] Guid? userId)
		{
			if (!userId.HasValue)
				return BadRequest("User should be specified");

			var result = mCore.UsersApi.GetUserTeamsMembership(userId.Value);
			return new ObjectResult(result);
		}


		/// <summary>
		/// Request user membership in team
		/// </summary>
		/// <remarks>
		/// After requesting user will not become a team member.
		/// Team administrator should approuve this request.
		/// </remarks>
		/// <param name="userId">Id of user</param>
		/// <param name="teamId">Id of team</param>
		/// <response code="201">User participation in team created</response>
		/// <response code="0">Unexpected error</response>
		[HttpPost]
		[Route("/users/{userId}/teams/{teamId}")]
		[SwaggerOperation("RequestUserTeamMembership")]
		public virtual IActionResult RequestUserTeamMembership([FromRoute] Guid? userId, [FromRoute] Guid? teamId)
		{
			Logger.Info(mLogMessManager.Log("SomeUser", Codes.MembershipRequest, "User requested membership in team. ",
				mReferenceId,
				new {userId, teamId}));

			try
			{
				new Assertor()
					.Add(() => userId.HasValue, "userId should be specified.")
					.Add(() => teamId.HasValue, "teamId should be specified.")
					.GetMessage();

				mCore.UsersApi.RequestUserTeamMembership(userId.Value, teamId.Value);

				Logger.Error(mLogMessManager.Log("SomeUser", Codes.MembershipRequest, "Membership successfully requested.",
					mReferenceId));
				return Ok();
			}
			catch (NotValidRequestException exception)
			{
				Logger.Error(mLogMessManager.Log("SomeUser", Codes.MembershipRequest,
					$"Error occured during requesting user team mebership. {exception.Message}",
					mReferenceId));
				return BadRequest(exception.Message);
			}
		}


		/// <summary>
		/// Get registered in system users
		/// </summary>
		/// <remarks>Get registered users by filter </remarks>
		/// <param name="filter">Json representation of query</param>
		/// <param name="page">Number of page in pagination</param>
		/// <param name="pageSize">Size of single page</param>
		/// <response code="200">An array of users</response>
		/// <response code="0">Unexpected error</response>
		[HttpGet]
		[Route("/users")]
		[SwaggerOperation("ListUsers")]
		[SwaggerResponse(200, type: typeof(List<UserInfo>))]
		public virtual IActionResult ListUsers([FromQuery] string filter, [FromQuery] int? page, [FromQuery] int? pageSize)
		{
			return new ObjectResult(mCore.UsersApi.ListUsers(pageSize ?? 5, page ?? 0));
		}


		/// <summary>
		/// Remove user participation in team
		/// </summary>
		/// <remarks>Owner can't leave team.</remarks>
		/// <param name="userId">Id of user</param>
		/// <param name="teamId">Id of team</param>
		/// <response code="200">User participation in team removed</response>
		/// <response code="0">Unexpected error</response>
		[HttpDelete]
		[Route("/users/{userId}/teams/{teamId}")]
		[SwaggerOperation("RemoveUserTeamMembership")]
		public virtual IActionResult RemoveUserTeamMembership([FromRoute] Guid? userId, [FromRoute] Guid? teamId)
		{
			Logger.Info(mLogMessManager.Log("SomeUser", Codes.MembershipRemove, "Membership remove requested.", mReferenceId,
				new {userId, teamId}));

			try
			{

				new Assertor(mess => new NotValidRequestException(mess))
					.Add(() => userId != null, "UserId should be specified")
					.Add(() => teamId != null, "TeamId should be specified")
					.Assert();

				mCore.UsersApi.RemoveUserTeammembership(userId.Value, teamId.Value);

				return Ok();
			}
			catch (NotValidRequestException exception)
			{
				Logger.Error(mLogMessManager.Log("SomeUser", Codes.MembershipRemove,
					$"Error occured during membreship removing. Error {exception.Message}", mReferenceId));
				return BadRequest(exception.Message);
			}
		}


		/// <summary>
		/// Update user data with given id.
		/// </summary>
		/// <remarks>Update user by given id </remarks>
		/// <param name="userId">Id of user</param>
		/// <param name="updatingUser">User data</param>
		/// <response code="200">User data was successfully update.</response>
		/// <response code="201">User was created</response>
		/// <response code="0">Unexpected error</response>
		[HttpPut]
		[Route("/users/{userId}")]
		[SwaggerOperation("UpdateUserData")]
		[SwaggerResponse(200, type: typeof(UserInfo))]
		public virtual IActionResult UpdateUserData([FromRoute]Guid? userId, [FromBody]User updatingUser)
		{
			Logger.Info(mLogMessManager.Log("SomeUser", Codes.UserDataUpdate, "User updated requested.", mReferenceId,
				new {userId, updatingUser}));

			try
			{
				new Assertor(mess => new NotValidRequestException(mess))
					.Add(() => userId != null, "UserId should be specified")
					.Add(() => updatingUser != null, "Updated info should be specified")
					.Assert();

				var result = mCore.UsersApi.UpdateUserData(userId.Value, updatingUser);

				Logger.Info(mLogMessManager.Log("SomeUser", Codes.UserDataUpdate, "User successfully updated.", mReferenceId));

				return new ObjectResult(result);
			}
			catch (NotValidRequestException exception)
			{
				Logger.Error(mLogMessManager.Log("SomeUser", Codes.UserDataUpdate, $"Error occured during user data updated: {exception.Message}",
					mReferenceId));
				return BadRequest(exception.Message);
			}
		}
	}
}
