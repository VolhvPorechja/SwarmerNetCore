/*
 * Swarmer API
 *
 * Internal Swarmer API
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Shotened user data.
    /// </summary>
    public partial class UserInfo : SysObject,  IEquatable<UserInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        /// <param name="Id">Id of object..</param>
        /// <param name="Created">Creationg date time.</param>
        /// <param name="Updated">Updating date time..</param>
        /// <param name="FirstName">First name of user..</param>
        /// <param name="SecondName">Second name of user..</param>
        /// <param name="Login">Login and nickname of user..</param>
        public UserInfo(int? Id = null, DateTime? Created = null, DateTime? Updated = null, string FirstName = null, string SecondName = null, string Login = null)
        {
            this.Id = Id;
            this.Created = Created;
            this.Updated = Updated;
            this.FirstName = FirstName;
            this.SecondName = SecondName;
            this.Login = Login;
            
        }

        /// <summary>
        /// Id of object.
        /// </summary>
        /// <value>Id of object.</value>
        public int? Id { get; set; }

        /// <summary>
        /// Creationg date time
        /// </summary>
        /// <value>Creationg date time</value>
        public DateTime? Created { get; set; }

        /// <summary>
        /// Updating date time.
        /// </summary>
        /// <value>Updating date time.</value>
        public DateTime? Updated { get; set; }

        /// <summary>
        /// First name of user.
        /// </summary>
        /// <value>First name of user.</value>
        public string FirstName { get; set; }

        /// <summary>
        /// Second name of user.
        /// </summary>
        /// <value>Second name of user.</value>
        public string SecondName { get; set; }

        /// <summary>
        /// Login and nickname of user.
        /// </summary>
        /// <value>Login and nickname of user.</value>
        public string Login { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
sb.Append("  Created: ").Append(Created).Append("\n");
sb.Append("  Updated: ").Append(Updated).Append("\n");
sb.Append("  FirstName: ").Append(FirstName).Append("\n");
sb.Append("  SecondName: ").Append(SecondName).Append("\n");
sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((UserInfo)obj);
        }

        /// <summary>
        /// Returns true if UserInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of UserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInfo other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.SecondName == other.SecondName ||
                    this.SecondName != null &&
                    this.SecondName.Equals(other.SecondName)
                ) && 
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                    if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                    if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                    if (this.SecondName != null)
                    hash = hash * 59 + this.SecondName.GetHashCode();
                    if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(UserInfo left, UserInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserInfo left, UserInfo right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
